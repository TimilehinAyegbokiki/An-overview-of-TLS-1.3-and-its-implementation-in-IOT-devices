theory TLS_13_lemmas
begin

builtins: diffie-hellman, hashing, symmetric-encryption, signing

section{* TLS 1.3 *}

/*
 * Protocol:    TLS 1.3 Handshake and Record Protocols
 * Modeler:     Cas Cremers, Marko Horvat, Sam Scott, Thyla van der Merwe
 * Year:        2016
 * Source:      http://tlswg.github.io/tls13-spec/
 *
 * Status:  in progress....
 */

// Hash declarations

functions: Expand/3, Extract/2, hmac/1, mac/1, mask/2, unmask/2

equations: unmask(mask(x, y), y) = x, unmask(mask(x, y), x) = y

/* AXIOMS */

/* Explicit equality checking */
axiom Eq_check_succeed: "All x y #i. Eq(x,y) @ i ==> x = y"
axiom Neq_check_succeed: "All x y #i. Neq(x,y) @ i ==> not (x = y)"

/* Generate one long-term key per actor */
axiom one_ltk:
  "All A x y #i #j.
    GenLtk(A, x)@i & GenLtk(A, y)@j ==> #i = #j"

axiom one_role_per_actor:
    "All actor tid tid2 role role2 #i #j. Start(tid, actor, role)@i & Start(tid2, actor, role2)@j
        ==> role = role2"

// crypto.m4i imports

// msgs.m4i imports

// state.m4i imports

/* ------- Public key infrastructure -------*/

/*
  Register PK
  ----------------
  
  Generates a long-term key for a party.

  Premises:
    Fr(~ltkA) - a fresh value for the key itself

  Actions:
    GenLtk($A, ~ltkA) - party $A has generated a long-term key

  Conclusions:
    !Ltk($A, ~ltkA) - binds the long-term key to the party $A
    !Pk($A, pk(~ltkA)) - models the distribution of the public key by some PKI
    Out(pk(~ltkA)) - outputs the public key so the adversary has knowledge
*/
rule Register_pk:
  [ Fr(~ltkA) ]--[ GenLtk($A, ~ltkA), HonestUse(~ltkA)
  ]->
  [ !Ltk($A, ~ltkA), !Pk($A, pk(~ltkA)), Out(pk(~ltkA)) ]

/*
  Reveal Ltk
  ----------------
  
  The adversarial capability to reveal long-term keys of parties.

  Premises:
    !Ltk($A, ~ltkA) - the long-term key to compromise

  Actions:
    RevLtk($A) - adversary has revealed the key of $A.

  Conclusions:
    Out(~ltkA) - provides the adversary with the long-term key
*/
rule Reveal_Ltk:
  [ !Ltk($A, ~ltkA) ] --[ RevLtk($A) ]-> [ Out(~ltkA) ]

rule client_hello:
let
    // Initialise state variables to zero.
     messages = '0'
res_psk = '0'
nc = '0'
ns = '0'
g = '0'
sg = '0'
hrr = '0'
x = '0'
y = '0'
gx = '0'
gy = '0'
gxy = '0'
psk_ke_mode = 'na'
psk_id = '0'
edi = '0'
es = '0'
hs = '0'
ms = '0'
cats = '0'
sats = '0'
hs_keyc = '0'
hs_keys = '0'
auth_status = <'0', '0'>
ems = '0'
rms = '0'
cert_req = '0'

    // Abstract client identity - does not currently correspond to
    // anything concrete
    C = $C

    // Server identity - can be interpreted as the hostname
    S = $S

    // Client nonce
    nc = ~nc

    // We reuse the client nonce to be a thread identifier
    tid = nc

    // Group, DH exponent, key share
    g1 = $g1
    g2 = $g2
    sg = <g1, g2>
    client_sg = <g1, g2>
    g = g1
    x = ~x
    gx = g^x

    messages = <messages, <'1','0x0303',nc,'0',$cipher_suites,'0',<<'43','0x0304'>,<'10',client_sg>,<'13',$sig_algs>,<'40',g,gx> > >>
    es = Extract(res_psk, '0')
in
    [ Fr(nc),
      Fr(x)
    ]
  --[ C0(tid),
      Start(tid, C, 'client'),
      RIdentity(tid, C, 'client', <C>),
      Neq(g1, g2),
      DH(tid, C, x),
      HonestUse(~x),
      HonestUse(gx)
    ]->
    [
      F_State_C1(tid,C,S, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req ),
      DHExp(x, tid, C),
    // Write the ClientHelloMsg onto the wire *presumably* with destination S
      Out(<'1','0x0303',nc,'0',$cipher_suites,'0',<<'43','0x0304'>,<'10',client_sg>,<'13',$sig_algs>,<'40',g,gx> > >)
    ]

rule recv_hello_retry_request:
let
    g1 = $g1
    g2 = $g2
    p_sg = <g1, g2>
    p_g = g1
    p_hrr = '0'
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    hrr = 'hrr'
    new_g = g2
    g = g2
    client_sg = <g1, g2>

    C = $C
    S = $S

    new_x = ~new_x
    x = new_x
    gx = g^x

    // PSK after HRR has its own rule (see recv_hello_retry_request_psk)
    psk_ke_mode = 'na'
    auth_status = <'0', '0'>

    messages = <messages, <'6',    '0x0303',    <<'40',new_g>> >>
    messages = <messages, <'1','0x0303',nc,'0',$cipher_suites,'0',<<'43','0x0304'>,<'10',client_sg>,<'13',$sig_algs>,<'40',g,gx> > >>
    es = Extract(res_psk, '0')
in
    [ F_State_C1(tid,C,S, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req ),
      Fr(new_x),
      In(<'6',    '0x0303',    <<'40',new_g>> >),
      DHExp(p_x, tid, C)
    ]
  --[ C1_retry(tid),
      Neq(g1, g2),
      Instance(tid, C, 'client'),
      DeleteDH(tid, C, p_x),
      DH(tid, C, x)
    ]->
    [ Out(<'1','0x0303',nc,'0',$cipher_suites,'0',<<'43','0x0304'>,<'10',client_sg>,<'13',$sig_algs>,<'40',g,gx> > >),
      DHExp(x, tid, C),
      F_State_C1(tid,C,S, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req )
    ]

rule recv_server_hello:
let
    p_g = $g
    p_x = ~x

    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    ns = new_ns
    gy = new_gy

    C = $C
    S = $S

    // equivalent to checking gy in <$g>
    gy = g^new_y

    // Derive the shared secret
    gxy = gy^x

    // Received a basic server hello - abandon PSK mode (if attempted)
    psk_ke_mode = 'na'
    auth_status = <'0', '0'>

    messages = <messages, <'2',  '0x0303',  ns,  $cipher_suite,  <<'13',$sig_algs>,<'40',g,gy>> >>
in
    [ F_State_C1(tid,C,S, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req ),
      In(<'2',  '0x0303',  ns,  $cipher_suite,  <<'13',$sig_algs>,<'40',g,gy>> >)
    ]
  --[ C1(tid),
      Instance(tid, C, 'client'),
      Neq(gy, g),
      Neq(gxy, g),
      DHChal(g, x, new_y, gx, gy, gxy),
      RNonces(tid, C, 'client', <nc,ns>)
    ]->
    [
      F_State_C2a(tid,C,S, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req )
    ]

rule client_gen_keys:
let
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    C = $C
    S = $S

    hs = Extract(gxy, es)
    ms = Extract('0', hs)

    hs_keyc = Expand(Expand(hs, <'32', 'TLS13clienthandshaketrafficsecret', <h(messages)>> , '32'), <'32', 'TLS13handshakekeyexpansion_key', '0'> , '32')
    hs_keys = Expand(Expand(hs, <'32', 'TLS13serverhandshaketrafficsecret', <h(messages)>> , '32'), <'32', 'TLS13handshakekeyexpansion_key', '0'> , '32')

in
    [ F_State_C2a(tid,C,S, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req ),
      DHExp(x, tid, C)
    ]
  --[ C2a(tid),
      Instance(tid, C, 'client'),
      RMS(tid, C, 'client', <ms>),
      RHS(tid, C, 'client', <hs>),
      DeleteDH(tid, C, x)
    ]->
    [
      F_State_C2b(tid,C,S, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req )
    ]

rule recv_encrypted_extensions:
let
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    S = $S
    C = $C

    messages = <messages, <'8',$exts>>

in
    [ F_State_C2b(tid,C,S, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req ),
      In(senc{<'8',$exts>}hs_keys)
    ]
  --[ C2b(tid),
      Instance(tid, C, 'client')
    ]->
    [ F_State_C2c(tid,C,S, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req )
    ]

rule recv_certificate_request:
let
    p_psk_ke_mode ='na'
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    S = $S
    C = $C

    certificate_request_context = '0' 
    cert_req = '1'
    messages = <messages,  <'13',  certificate_request_context,  $certificate_extensions >>

in
    [ F_State_C2c(tid,C,S, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req ),
      In(senc{ <'13',  certificate_request_context,  $certificate_extensions >}hs_keys)
    ]
  --[ C2c_req(tid),
      Instance(tid, C, 'client')
    ]->
    [ F_State_C2d(tid,C,S, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req )
    ]

rule skip_recv_certificate_request:
let
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    S = $S
    C = $C
    cert_req = '0'
in
    [ F_State_C2c(tid,C,S, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req )
    ]
  --[ C2c(tid),
      Instance(tid, C, 'client')
    ]->
    [ F_State_C2d(tid,C,S, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req )
    ]

rule recv_server_auth:
let
    p_psk_ke_mode = 'na'
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    S = $S
    C = $C

    certificate_request_context = '0'
    certificate = pk(~ltkS)
    messages = <messages, <'11',certificate_request_context,certificate>>
    sig_messages = <'TLS13server_CertificateVerify', <h(messages)>>

    messages = <messages, <'15',  signature >>

    exp_verify_data = hmac(Expand(Expand(hs, <'32', 'TLS13serverhandshaketrafficsecret', <h(messages)>> , '32'), <'32', 'TLS13finished', '0'> , '32'), h(messages))

    messages = <messages, <'20',verify_data>>

    cats = Expand(ms, <'32', 'TLS13clientapplicationtrafficsecret', <h(messages)>> , '32')
    sats = Expand(ms, <'32', 'TLS13serverapplicationtrafficsecret', <h(messages)>> , '32')
    app_keys = Expand(sats, <'32', 'TLS13applicationdatakeyexpansion_key', '0'> , '32')
    ems = Expand(ms, <'32', 'TLS13exportermastersecret', <h(messages)>> , '32')

    // auth_status = <cas, sas>
    auth_status = <'0', 'auth'>
in
    [ F_State_C2d(tid,C,S, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req ),
      !Pk(S, pk(~ltkS)),
      In(senc{<'11',certificate_request_context,certificate>, <'15',  signature >, <'20',verify_data>}hs_keys)
    ]
  --[ C2d(tid),
      Instance(tid, C, 'client'),
      Eq(psk_ke_mode, 'na'),
      Eq(verify(signature, sig_messages, pk(~ltkS)), true),
      Eq(verify_data, exp_verify_data),
      RMode(tid, C, 'client', <psk_ke_mode>),
      CIdentity(tid, C, 'client', <<S,auth_status>>),
      CHS(tid, C, 'client', <hs>),
      CTranscript(tid, C, 'client', <messages>),
      CNonces(tid, C, 'client', <nc,ns>)
    ]->
    [ F_State_C3(tid,C,S, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req ),
      RecvStream(tid, C, S, auth_status, app_keys)
    ]

rule client_auth:
let
    // If certificate was requested, cannot ignore
    p_cert_req = '0'
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    S = $S
    C = $C

    verify_data = hmac(Expand(Expand(hs, <'32', 'TLS13clienthandshaketrafficsecret', <h(messages)>> , '32'), <'32', 'TLS13finished', '0'> , '32'), h(messages))

    messages = <messages, <'20',verify_data>>

    rms = Expand(ms, <'32', 'TLS13resumptionmastersecret', <h(messages)>> , '32')
    app_keyc = Expand(cats, <'32', 'TLS13applicationdatakeyexpansion_key', '0'> , '32')
    app_keys = Expand(sats, <'32', 'TLS13applicationdatakeyexpansion_key', '0'> , '32')
in

    [ F_State_C3(tid,C,S, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req )
    ]
  --[ C3(tid),
      Instance(tid, C, 'client'),
      RTranscript(tid, C, 'client', <messages>),
      RHSMS(tid, C, 'client', <hs,ms>),
      RRMS(tid, C, 'client', <S,rms,messages>),
      RMode(tid, C, 'client', <psk_ke_mode>),
      SessionKey(tid, C, S, auth_status, <app_keyc, app_keys>)
    ]->
    [ L_State_C4(tid,C,S, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req ),
      Out(senc{<'20',verify_data>}hs_keyc),
      SendStream(tid, C, S, auth_status, app_keyc)
    ]

rule client_auth_cert:
let
    p_cert_req = '1'
    p_psk_ke_mode = 'na'
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    S = $S
    C = $C

    certificate_request_context = '0' 
    certificate = pk(~ltkC)
    messages = <p_messages, <'11',certificate_request_context,certificate>>

    signature = sign{<'TLS13client_CertificateVerify', <h(messages)>>}~ltkC
    messages = <messages, <'15',  signature >>

    verify_data = hmac(Expand(Expand(hs, <'32', 'TLS13clienthandshaketrafficsecret', <h(messages)>> , '32'), <'32', 'TLS13finished', '0'> , '32'), h(messages))
    messages = <messages, <'20',verify_data>>

    rms = Expand(ms, <'32', 'TLS13resumptionmastersecret', <h(messages)>> , '32')

    // zeroes cert_req after it has been used
    cert_req = '0'

    app_keyc = Expand(cats, <'32', 'TLS13applicationdatakeyexpansion_key', '0'> , '32')
    app_keys = Expand(sats, <'32', 'TLS13applicationdatakeyexpansion_key', '0'> , '32')

    auth_status = <'auth', 'auth'>
in

    [ F_State_C3(tid,C,S, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req ),
      RecvStream(tid, C, S, p_auth_status, app_keys),
      !Ltk(C, ~ltkC)
    ]
  --[ C3_cert(tid),
      Instance(tid, C, 'client'),
      UseLtk(~ltkC, signature),
      RHSMS(tid, C, 'client', <hs,ms>),
      RTranscript(tid, C, 'client', <messages>),
      RRMS(tid, C, 'client', <S,rms,messages>),
      RMode(tid, C, 'client', <psk_ke_mode>),
      SessionKey(tid, C, S, auth_status, <app_keyc, app_keys>)
    ]->
    [ L_State_C4(tid,C,S, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req ),
      Out(senc{<'11',certificate_request_context,certificate>, <'15',  signature >, <'20',verify_data>}hs_keyc),
      SendStream(tid, C, S, auth_status, app_keyc),
      RecvStream(tid, C, S, auth_status, app_keys)
    ]

rule start_server:
let
    C = $C
    S = $S

    // Initialises all variables to zero.
     messages = '0'
res_psk = '0'
nc = '0'
ns = '0'
g = '0'
sg = '0'
hrr = '0'
x = '0'
y = '0'
gx = '0'
gy = '0'
gxy = '0'
psk_ke_mode = 'na'
psk_id = '0'
edi = '0'
es = '0'
hs = '0'
ms = '0'
cats = '0'
sats = '0'
hs_keyc = '0'
hs_keys = '0'
auth_status = <'0', '0'>
ems = '0'
rms = '0'
cert_req = '0'

    tid = ~tid
    sg = $g
in
    [ Fr(tid)
    ]
  --[ Start(tid, S, 'server'),
      RIdentity(tid, S, 'server', <S>)
    ]->
    [
      F_State_S0(tid,S,C, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req )
    ]

/*
    Server receives vanilla ClientHello
*/

rule recv_client_hello:
let
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    psk_ke_mode = 'na'
    g1 = $g1
    g2 = $g2
    client_sg = <g1, g2>
    nc = new_nc
    gx = new_gx
    g = $new_g
    gx = g^new_x

    // Abstract client identity - does not currently correspond to
    // anything concrete
    // From the server's perspective: associate with an open socket.
    C = $C

    // Server identity - can be interpreted as the hostname
    S = $S

    // Server nonce
    ns = ~new_ns

    messages = <messages, <'1','0x0303',nc,'0',$cipher_suites,'0',<<'43','0x0304'>,<'10',client_sg>,<'13',$sig_algs>,<'40',g,gx> > >>

    psk_ke_mode = 'na'

in
    [ In(<'1','0x0303',nc,'0',$cipher_suites,'0',<<'43','0x0304'>,<'10',client_sg>,<'13',$sig_algs>,<'40',g,gx> > >),
      Fr(ns),
      F_State_S0(tid,S,C, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req )
    ]
  --[ S0(tid),
      Neq(g1, g2)
    ]->
    [
      F_State_S1(tid,S,C, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req )
    ]

rule hello_retry_request:
let
    // Cannot HRR twice in a handshake
    p_hrr = '0'
    p_sg = $p_sg
    // Copies across all values from  p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms, p_cert_req  to  res_psk, messages, nc, ns, g, sg, hrr, x, y, gx, gy, gxy, psk_ke_mode, psk_id, edi, es, hs, ms, cats, sats, hs_keyc, hs_keys, auth_status, ems, rms, cert_req 
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    hrr = 'hrr'
    new_g = sg
    g = sg

    C = $C
    S = $S

    messages = <messages, <'6',    '0x0303',    <<'40',new_g>> >>

in
    [ F_State_S1(tid,S,C, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req )
    ]
  --[ S1_retry(tid),
      Neq(p_g, sg),
      Instance(tid, S, 'server')
    ]->
    [ Out(<'6',    '0x0303',    <<'40',new_g>> >),
      F_State_S0(tid,S,C, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req )
    ]

/*
    Server sends basic ServerHello
*/

rule server_hello:
let
    p_g = $p_g
    p_gx = p_g^some_x
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    // Server continuing in normal mode (no PSK mode)
    psk_ke_mode = 'na'
    auth_status = <'0', '0'>

    C = $C
    S = $S

    // Group, DH exponent, key share
    y = ~y
    gy = g^y
    gxy = gx^y

    es = Extract(res_psk, '0')
    messages = <messages, <'2',  '0x0303',  ns,  $cipher_suite,  <<'13',$sig_algs>,<'40',g,gy>> >>
in
    [ F_State_S1(tid,S,C, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req ),
      Fr(y)
    ]
  --[ S1(tid),
      Eq(g, sg),
      Neq(gx, g),
      Neq(gxy, g),
      Instance(tid, S, 'server'),
      RNonces(tid, S, 'server', <nc,ns>),
      DHChal(g, some_x, y, gx, gy, gxy),
      DH(tid, S, y)
    ]->
    [
      F_State_S2a(tid,S,C, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req ),
      DHExp(y, tid, S),
      Out(<'2',  '0x0303',  ns,  $cipher_suite,  <<'13',$sig_algs>,<'40',g,gy>> >)
    ]

rule server_gen_keys:
let
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    S = $S
    C = $C

    hs = Extract(gxy, es)
    ms = Extract('0', hs)

    hs_keys = Expand(Expand(hs, <'32', 'TLS13serverhandshaketrafficsecret', <h(messages)>> , '32'), <'32', 'TLS13handshakekeyexpansion_key', '0'> , '32')
    hs_keyc = Expand(Expand(hs, <'32', 'TLS13clienthandshaketrafficsecret', <h(messages)>> , '32'), <'32', 'TLS13handshakekeyexpansion_key', '0'> , '32')
in
    [ F_State_S2a(tid,S,C, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req ),
      DHExp(y, tid, S)
    ]
  --[ S2a(tid),
      Extract('0', hs),
      Instance(tid, S, 'server'),
      RHS(tid, S, 'server', <hs>),
      RMS(tid, S, 'server', <ms>),
      DeleteDH(tid, S, y)
   ]->
    [ F_State_S2b(tid,S,C, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req )
    ]

rule encrypted_extensions:
let
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    S = $S
    C = $C

    messages = <messages, <'8',$exts>>
in
    [ F_State_S2b(tid,S,C, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req )
    ]
  --[ S2b(tid),
      Instance(tid, S, 'server')
    ]->
    [ F_State_S2c(tid,S,C, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req ),
      Out(senc{<'8',$exts>}hs_keys)
    ]

rule certificate_request:
let
    p_psk_ke_mode = 'na'
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    S = $S
    C = $C

    certificate_request_context = '0' 
    cert_req = '1' 
    messages = <messages,  <'13',  certificate_request_context,  $certificate_extensions >>
in
    [ F_State_S2c(tid,S,C, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req )
    ]
  --[ S2c_req(tid),
      Instance(tid, S, 'server'),
      RCertReqCtxt(tid, S, 'server', <certificate_request_context>)
    ]->
    [ F_State_S2d(tid,S,C, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req ),
      Out(senc{ <'13',  certificate_request_context,  $certificate_extensions >}hs_keys)
    ]

rule skip_certificate_request:
let
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    cert_req = '0'

    S = $S
    C = $C
in
    [ F_State_S2c(tid,S,C, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req )
    ]
  --[ S2c(tid),
      Instance(tid, S, 'server')
    ]->
    [ F_State_S2d(tid,S,C, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req )
    ]

rule recv_client_auth:
let
    p_cert_req = '0'
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    C = $C
    S = $S

    exp_verify_data = hmac(Expand(Expand(hs, <'32', 'TLS13clienthandshaketrafficsecret', <h(messages)>> , '32'), <'32', 'TLS13finished', '0'> , '32'), h(messages))

    messages = <messages, <'20',verify_data>>

    rms = Expand(ms, <'32', 'TLS13resumptionmastersecret', <h(messages)>> , '32')

    app_keyc = Expand(cats, <'32', 'TLS13applicationdatakeyexpansion_key', '0'> , '32')
    app_keys = Expand(sats, <'32', 'TLS13applicationdatakeyexpansion_key', '0'> , '32')
in
    [ F_State_S3(tid,S,C, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req ),
      In(senc{<'20',verify_data>}hs_keyc)
    ]
  --[ S3(tid),
      Instance(tid, S, 'server'),
      Eq(verify_data, exp_verify_data),
      RMode(tid, S, 'server', <psk_ke_mode>),
      CIdentity(tid, S, 'server', <C,auth_status>),
      CHS(tid, S, 'server', <hs>),
      RHSMS(tid, S, 'server', <hs,ms>),
      RRMS(tid, S, 'server', <C,rms,messages>),
      CTranscript(tid, S, 'server', <messages>),
      CNonces(tid, S, 'server', <nc,ns>),
      SessionKey(tid, S, C, auth_status, <app_keys, app_keyc>)
    ]->
    [ L_State_S4(tid,S,C, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req ),
      RecvStream(tid, S, C, auth_status, app_keyc)
    ]




    


rule send:
    [ SendStream(~tid, $actor, $peer, auth_status, app_key_out),
      Fr(~data)
    ]
  --[ Send(~tid),
      SendData(~tid, $actor, $peer, auth_status, ~data)
    ]->
    [ SendStream(~tid, $actor, $peer, auth_status, app_key_out),
      Out(senc{<~data, '23'>}app_key_out)
    ]

rule recv:
    [ RecvStream(~tid, $actor, $peer, auth_status, app_key_in),
      In(senc{<data, '23'>}app_key_in)
    ]
  --[ Recv(~tid),
      RecvData(~tid, $actor, $peer, auth_status, data)
    ]->
    [
      RecvStream(~tid, $actor, $peer, auth_status, app_key_in)
    ]

// msgs.m4i imports

// crypto.m4i imports

// state.m4i imports



rule new_session_ticket:
let
    p_rms = Expand(ms, <'32', 'TLS13resumptionmastersecret', <h(messages)>> , '32')
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    C = $C
    S = $S

    ticket = ~ticket
    ticket_age_add = ~ticket_age_add

    res_psk = rms
in
    [ L_State_S4(tid,S,C, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req ),
      SendStream(tid, S, C, auth_status, app_keys),
      Fr(ticket),
      Fr(ticket_age_add)
    ]
  --[ S4_NST(tid),
      Instance(tid, S, 'server'),
      RPostHS(tid, S, 'server', <hs,rms,C,auth_status,messages>),
      RNST(tid, S, 'server', <ticket,ticket_age_add>)
    ]->
    [ L_State_S4(tid,S,C, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req ),
      SendStream(tid, S, C, auth_status, app_keys),
      !ServerPSK(S, C, res_psk, auth_status, <'4',$ticket_lifetime,ticket_age_add,ticket,<<'46',$max_early_data_size>> >, 'res'),
      SecretPSK(S, res_psk),
      Out(senc{<'4',$ticket_lifetime,ticket_age_add,ticket,<<'46',$max_early_data_size>> >}app_keys)
    ]

rule recv_new_session_ticket:
let
    p_rms = Expand(ms, <'32', 'TLS13resumptionmastersecret', <h(messages)>> , '32')
    
res_psk = p_res_psk
nc = p_nc
ns = p_ns
g = p_g
sg = p_sg
x = p_x
y = p_y
gx = p_gx
gy = p_gy
gxy = p_gxy
hrr = p_hrr
psk_ke_mode = p_psk_ke_mode
psk_id = p_psk_id
edi = p_edi
es = p_es
hs = p_hs
ms = p_ms
cats = p_cats
sats = p_sats
hs_keyc = p_hs_keyc
hs_keys = p_hs_keys
auth_status = p_auth_status
messages = p_messages
ems = p_ems
rms = p_rms
cert_req = p_cert_req
tid = ~tid

    C = $C
    S = $S

    res_psk = rms
in
    [ L_State_C4(tid,C,S, p_res_psk,p_messages,p_nc,p_ns,p_g,p_sg,p_hrr,p_x,p_y,p_gx,p_gy,p_gxy,p_psk_ke_mode,p_psk_id,p_edi,p_es,p_hs,p_ms,p_cats,p_sats,p_hs_keyc,p_hs_keys,p_auth_status,p_ems,p_rms,p_cert_req ),
      RecvStream(tid, C, S, auth_status, app_keys),
      In(senc{<'4',$ticket_lifetime,ticket_age_add,ticket,<<'46',$max_early_data_size>> >}app_keys)
    ]
  --[ C4_NST(tid),
      Instance(tid, C, 'client'),
      RPostHS(tid, C, 'client', <hs,rms,S,auth_status,messages>)
    ]->
    [ L_State_C4(tid,C,S, res_psk,messages,nc,ns,g,sg,hrr,x,y,gx,gy,gxy,psk_ke_mode,psk_id,edi,es,hs,ms,cats,sats,hs_keyc,hs_keys,auth_status,ems,rms,cert_req ),
      RecvStream(tid, C, S, auth_status, app_keys),
      !ClientPSK(C, S, res_psk, auth_status, <'4',$ticket_lifetime,ticket_age_add,ticket,<<'46',$max_early_data_size>> >, 'res'),
      SecretPSK(C, res_psk)
    ]







rule Reveal_Ltk:
  [ !Ltk($A, ~ltkA) ] --[ RevLtk($A) ]-> [ Out(~ltkA) ]

rule Reveal_DHExp:
  [ DHExp(~x, ~tid, $A) ] --[ RevDHExp(~tid, $A,~x) ]-> [ Out(~x), DHExp(~x, ~tid, $A) ]


/*
  TYPING LEMMAS
*/

/*
  LEMMAS USED IN AUTH_HELPERS
  
*/

/*
  LEMMAS USED IN SECRET_HELPERS

*/

/*
  LEMMAS USED IN LEMMA

*/

/*
  LEMMAS USED IN DH_INJ

*/





lemma post_master_secret [reuse, hide_lemma=posths_rms]:
  "All tid actor peer role hs rms aas messages #i #k.
    RPostHS(tid, actor, role, <hs,rms,peer,<aas,'auth'>,messages>)@i & 
    CHS(tid, actor, role, <hs>)@i  &
    KU(rms)@k ==>
      (Ex #r. RevLtk(peer)@r & #r < #i) |
      (Ex tid3 x #r. RevDHExp(tid3, peer, x)@r & #r < #i) |
      (Ex tid4 y #r. RevDHExp(tid4, actor, y)@r & #r < #i)"




lemma handshake_secret [reuse, use_induction, hide_lemma=posths_rms_weak]:
  "All tid actor peer role hs aas #i #k.
    CHS(tid, actor, role, <hs>)@i &
    CIdentity(tid, actor, role, <peer,<aas,'auth'>>)@i &
    KU(hs)@k ==>
        (Ex #r. RevLtk(peer)@r & #r < #i) |
        (Ex tid3 x #r. RevDHExp(tid3, peer, x)@r & #r < #i) |
        (Ex tid4 y #r. RevDHExp(tid4, actor, y)@r & #r < #i)"

lemma secret_session_keys [hide_lemma=sig_origin,hide_lemma=posths_rms]:
  "All tid actor peer kw kr pas #i.
      SessionKey(tid, actor, peer, <pas, 'auth'>, <kw, kr>)@i & 
      not (Ex #r. RevLtk(peer)@r & #r < #i) &
      not (Ex tid3 x #r. RevDHExp(tid3, peer, x)@r & #r < #i) &
      not (Ex tid4 y #r. RevDHExp(tid4, actor, y)@r & #r < #i) 
    ==> not Ex #j. K(kr)@j"



lemma unique_session_keys:
  "All tid tid2 actor peer peer2 kr kw as as2 #i #j.
     SessionKey(tid, actor, peer, as, <kr, kw>)@i & 
     SessionKey(tid2, actor, peer2, as2, <kr, kw>)@j
      ==>
        #i = #j"


lemma consistent_nonces [reuse]:
  "All tid actor role nonces #i. 
    CNonces(tid, actor, role, <nonces>)@i ==>
      Ex #j. RNonces(tid, actor, role, <nonces>)@j"



lemma entity_authentication [reuse, use_induction]:
  "All tid actor peer nonces cas #i. 
      CNonces(tid, actor, 'client', <nonces>)@i & CIdentity(tid, actor, 'client', <peer,<cas,'auth'>>)@i &
      not (Ex #r. RevLtk(peer)@r & #r < #i) &
      not (Ex tid3 x #r. RevDHExp(tid3, peer, x)@r & #r < #i) &
      not (Ex tid4 y #r. RevDHExp(tid4, actor, y)@r & #r < #i)
          ==> (Ex tid2 #j. RNonces(tid2, peer, 'server', <nonces>)@j & #j < #i)"


          
lemma mutual_entity_authentication [reuse, use_induction]:
  "All tid actor peer nonces sas #i.
      CNonces(tid, actor, 'server', <nonces>)@i & CIdentity(tid, actor, 'server', <peer,<sas,'auth'>>)@i &
      not (Ex #r. RevLtk(peer)@r & #r < #i) &
      not (Ex tid3 x #r. RevDHExp(tid3, peer, x)@r & #r < #i) &
      not (Ex tid4 y #r. RevDHExp(tid4, actor, y)@r & #r < #i) 
          ==> (Ex tid2 #j. RNonces(tid2, peer, 'client', <nonces>)@j & #j < #i)"




lemma injective_mutual_entity_authentication [reuse, hide_lemma=posths_rms]:
  "All tid actor peer role nonces aas #i.
      CNonces(tid, actor, role, <nonces>)@i & CIdentity(tid, actor, role, <peer,<aas,'auth'>>)@i &
      not (Ex #r. RevLtk(peer)@r & #r < #i) &
      not (Ex tid3 x #r. RevDHExp(tid3, peer, x)@r & #r < #i) &
      not (Ex tid4 y #r. RevDHExp(tid4, actor, y)@r & #r < #i) 
          ==> 
          Ex role2 tid2 #j. RNonces(tid2, peer, role2, <nonces>)@j & #j < #i & not role = role2 &
          (All tid3 peer2 #k. RNonces(tid3, peer2, role2, <nonces>)@k ==> #k = #j)"



lemma session_key_agreement [hide_lemma=sig_origin]:
  "All tid tid2 actor peer actor2 peer2 nonces keys keys2 cas as2 #i #j #k #l.
     SessionKey(tid, actor, peer2, <cas, 'auth'>, keys)@i & 
     RNonces(tid, actor, 'client', <nonces>)@j &
     SessionKey(tid2, peer, actor2, as2, keys2)@k &
     RNonces(tid2, peer, 'server', <nonces>)@l &
      // not (Ex #r. RevLtk(actor)@r & #r < #i) &
      not (Ex #r. RevLtk(peer)@r & #r < #i & #r < #k) &
      not (Ex tid3 x #r. RevDHExp(tid3, peer, x)@r & #r < #i & #r < #k) &
      not (Ex tid4 y #r. RevDHExp(tid4, actor, y)@r & #r < #i & #r < #k)
      ==> keys = keys2"


end

